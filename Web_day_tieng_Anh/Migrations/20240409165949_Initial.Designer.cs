// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Web_day_tieng_Anh.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240409165949_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Enrollment", b =>
                {
                    b.Property<int>("enrollmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("enrollmentsId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("enrollmentsDate")
                        .HasColumnType("datetime2");

                    b.HasKey("enrollmentsId");

                    b.HasIndex("UserId");

                    b.HasIndex("courseId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Answer", b =>
                {
                    b.Property<int>("answerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("answerId"));

                    b.Property<string>("answerContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("questionId")
                        .HasColumnType("int");

                    b.HasKey("answerId");

                    b.HasIndex("questionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Comment", b =>
                {
                    b.Property<int>("commentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("commentId"));

                    b.Property<int?>("LessonlessionId")
                        .HasColumnType("int");

                    b.Property<string>("commentContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("lessionId")
                        .HasColumnType("int");

                    b.HasKey("commentId");

                    b.HasIndex("LessonlessionId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("courseId"));

                    b.Property<int?>("CourseGroupsgroupId")
                        .HasColumnType("int");

                    b.Property<string>("courseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ratings")
                        .HasColumnType("int");

                    b.HasKey("courseId");

                    b.HasIndex("CourseGroupsgroupId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.CourseGroup", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("groupId"));

                    b.Property<string>("groupDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("groupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("groupId");

                    b.ToTable("CourseGroups");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.CourseGroupMapping", b =>
                {
                    b.Property<int>("mappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("mappingId"));

                    b.Property<int?>("courseGroupgroupId")
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("groupId")
                        .HasColumnType("int");

                    b.HasKey("mappingId");

                    b.HasIndex("courseGroupgroupId");

                    b.HasIndex("courseId");

                    b.ToTable("CourseGroupMappings");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Lesson", b =>
                {
                    b.Property<int>("lessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("lessionId"));

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("lessonDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lessonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("quiz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("lessionId");

                    b.HasIndex("courseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Question", b =>
                {
                    b.Property<int>("questionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("questionId"));

                    b.Property<string>("questionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("testId")
                        .HasColumnType("int");

                    b.HasKey("questionId");

                    b.HasIndex("testId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.StudentProgress", b =>
                {
                    b.Property<int>("progressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("progressId"));

                    b.Property<int?>("LessonlessionId")
                        .HasColumnType("int");

                    b.Property<bool>("completed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("completedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("enrollmentId")
                        .HasColumnType("int");

                    b.Property<int>("lessionId")
                        .HasColumnType("int");

                    b.HasKey("progressId");

                    b.HasIndex("LessonlessionId");

                    b.HasIndex("enrollmentId");

                    b.ToTable("StudentProgresses");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Test", b =>
                {
                    b.Property<int>("testId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("testId"));

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("testDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("testName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("testId");

                    b.HasIndex("courseId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.TestScore", b =>
                {
                    b.Property<int>("scoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("scoreId"));

                    b.Property<int>("testId")
                        .HasColumnType("int");

                    b.HasKey("scoreId");

                    b.HasIndex("testId");

                    b.ToTable("TestScores");
                });

            modelBuilder.Entity("Enrollment", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Web_day_tieng_Anh.Models.Course", "course")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Web_day_tieng_Anh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Answer", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("questionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Comment", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.Lesson", "Lesson")
                        .WithMany("comments")
                        .HasForeignKey("LessonlessionId");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Course", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.CourseGroup", "CourseGroups")
                        .WithMany("courses")
                        .HasForeignKey("CourseGroupsgroupId");

                    b.Navigation("CourseGroups");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.CourseGroupMapping", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.CourseGroup", "courseGroup")
                        .WithMany()
                        .HasForeignKey("courseGroupgroupId");

                    b.HasOne("Web_day_tieng_Anh.Models.Course", "courses")
                        .WithMany()
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("courseGroup");

                    b.Navigation("courses");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Lesson", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.Course", "course")
                        .WithMany("Lessons")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Question", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.Test", "Test")
                        .WithMany("question")
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.StudentProgress", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.Lesson", "Lesson")
                        .WithMany("studentProgresses")
                        .HasForeignKey("LessonlessionId");

                    b.HasOne("Enrollment", "enrollments")
                        .WithMany("studentsProgress")
                        .HasForeignKey("enrollmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("enrollments");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Test", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.Course", "course")
                        .WithMany("Tests")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.TestScore", b =>
                {
                    b.HasOne("Web_day_tieng_Anh.Models.Test", "Test")
                        .WithMany()
                        .HasForeignKey("testId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Enrollment", b =>
                {
                    b.Navigation("studentsProgress");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Course", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.CourseGroup", b =>
                {
                    b.Navigation("courses");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Lesson", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("studentProgresses");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Web_day_tieng_Anh.Models.Test", b =>
                {
                    b.Navigation("question");
                });
#pragma warning restore 612, 618
        }
    }
}
