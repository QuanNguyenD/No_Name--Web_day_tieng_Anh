@model Web_day_tieng_Anh.Models.Lesson

@{
    ViewData["Title"] = "Display";
}
<h1 class="mt-4 px-4">@Html.DisplayFor(model => model.LessonName)</h1>
<div class="container-fluid px-4">

    <hr style="color:black">

    <div class="outer-container">
        <section class="watch-video">
            <div class="video-container">
                <div class="video">
                    @if (!string.IsNullOrEmpty(Model.ImgUrl))
                    {
                        <video controls style="width: 100%; height: auto;">
                            <!-- Make the video take full width of container -->
                            <source src="@Model.ImgUrl" type="video/mp4">
                            Your browser does not support HTML video.
                        </video>
                    }
                </div>
                <div class="info">
                    <p class="date"><i class="fas fa-calendar"></i><span>22-10-2022</span></p>
                    <p class="date"><i class="fas fa-heart" id="likeIcon"></i><span id="likeCount">44 likes</span></p>
                </div>

                <hr class="video-divider" />

                <div class="tutor">
                    <img src="~/images/pic-2.jpg" alt="">
                    <div>
                        <h3>Nguyen Van Ninh</h3>
                        <span>Teacher</span>
                    </div>
                </div>
                <form action="" method="post" class="flex">
                    <a href="playlist.html" class="custom-button">View Playlist</a>
                    <button type="button" class="like-button" id="likeButton"><i class="far fa-heart"></i><span id="likeButtonText">Like</span></button>
                </form>

                <article>
                    @Html.Raw(Model.LessonDescription)
                </article>
            </div>
        </section>

        <script>
            document.addEventListener('DOMContentLoaded', function () {
                var likeButton = document.getElementById('likeButton');
                var likeCountSpan = document.getElementById('likeCount');
                var likeIcon = document.getElementById('likeIcon');

                // Khởi tạo số like từ Local Storage hoặc mặc định là 0 nếu không có
                var likeCount = parseInt(localStorage.getItem('likeCount')) || 0;
                likeCountSpan.textContent = likeCount + " likes";

                // Biến kiểm tra xem người dùng đã like chưa
                var liked = localStorage.getItem('liked') === 'true';

                // Cập nhật trạng thái của nút like và icon
                if (liked) {
                    likeButton.classList.add('liked');
                    likeIcon.classList.add('liked');
                }

                likeButton.addEventListener('click', function () {
                    if (!liked) {
                        likeCount++;
                        localStorage.setItem('likeCount', likeCount);
                        likeCountSpan.textContent = likeCount + " likes";
                        localStorage.setItem('liked', 'true');
                        likeButton.classList.add('liked');
                        likeIcon.classList.add('liked');
                        liked = true;
                    } else {
                        likeCount--;
                        localStorage.setItem('likeCount', likeCount);
                        likeCountSpan.textContent = likeCount + " likes";
                        localStorage.setItem('liked', 'false');
                        likeButton.classList.remove('liked');
                        likeIcon.classList.remove('liked');
                        liked = false;
                    }
                });
            });
        </script>

        <section class="comments">
            <h1 class="heading" id="commentCountHeading"> Comments</h1>

            <hr style="color:black">

            <form action="" class="add-comment">
                <h3>Add Comments</h3>
                <textarea id="commentText" name="comment_box" placeholder="enter your comment" required maxlength="1000" cols="30" rows="10"></textarea>
                <input type="submit" value="Add Comment" class="add-comment-button" name="add_comment">
            </form>

            <h1 class="heading">User Comments</h1>

            <hr style="color:black">

            <div class="box-container" id="commentBoxContainer">
            </div>
        </section>


    <div>
        <a asp-controller="Lessons" asp-action="Index" asp-route-courseId="@Model.CourseId" class="custom-button">Back</a>
    </div>
</div>
</div>

<style>
    .custom-button {
        display: inline-block;
        padding: 10px 20px;
        border: 2px solid #00920B;
        background-color: #00920B;
        color: black;
        text-decoration: none;
        font-size: 16px;
        text-align: center;
        transition: background-color 0.3s, color 0.3s;
    }

        .custom-button:hover {
            background-color: gray;
            color: white;
            text-shadow: 0 0 5px white;
        }

    .container-fluid {
        background-color: gray;
    }

    .outer-container {
        background-color: white; /* Set outermost background color */
        padding: 20px; /* Add padding for spacing */
        border-radius: 10px; /* Add rounded corners */
    }

    .video-container {
        display: flex;
        justify-content: center;
        align-items: center;
        border: 2px solid #000;
        padding: 10px;
        margin-top: 20px;
        border-radius: 10px;
        width: 100%; /* Ensure the container takes full width */
        max-width: 800px; /* Optionally limit the maximum width */
        margin: auto; /* Center the container */
    }

    .breadcrumb {
        display: flex;
        justify-content: center;
    }

    .watch-video .video-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        width: 100%; /* Ensure the container takes full width */
        border: none; /* Remove border */
    }

    .watch-video .video {
        width: 100%;
        height: auto; /* Maintain aspect ratio */
        margin-bottom: 20px;
    }

    .watch-video .title {
        font-size: 24px;
        margin: 10px 0;
    }

    .watch-video .info {
        display: flex;
        justify-content: flex-start; /* Align items to the left */
        align-items: center;
        width: 100%;
        max-width: 800px; /* Ensure the content does not exceed the container */
        margin-bottom: 20px;
        gap: 20px; /* Space between the items */
    }

        .watch-video .info p {
            display: flex;
            align-items: center;
            margin: 0;
        }

        .watch-video .info i {
            margin-right: 5px;
        }

    .watch-video .tutor {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        justify-content: flex-start; /* Align items to the left */
        width: 100%;
        max-width: 800px; /* Ensure the content does not exceed the container */
    }

        .watch-video .tutor img {
            border-radius: 50%;
            margin-right: 10px;
        }

    .watch-video .flex {
        display: flex;
        justify-content: space-between;
        width: 100%;
        max-width: 800px; /* Ensure the content does not exceed the container */
        margin-bottom: 20px;
    }

    .watch-video .description {
        margin-top: 20px;
    }

    .comments .heading {
        font-size: 24px;
        margin: 20px 0;
    }

    .comments .add-comment h3 {
        margin-bottom: 10px;
    }

    .comments .add-comment textarea {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .comments .box-container {
        margin-top: 20px;
    }

    .comments .box {
        border: 1px solid #ccc;
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
    }

        .comments .box .user {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

            .comments .box .user img {
                border-radius: 50%;
                margin-right: 10px;
            }

        .comments .box .comment-box {
            margin-bottom: 10px;
        }

        .comments .box .flex-btn {
            display: flex;
            justify-content: flex-start; /* Đẩy các nút sang bên trái */
        }

    .fa-calendar {
        color: blue;
    }

    .fa-heart {
        color: red;
    }

    .like-button {
        background-color: #000;
        color: #fff;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        padding: 5px 10px;
    }

        .like-button i {
            margin-right: 5px;
        }

        .like-button:hover,
        .like-button:active {
            background-color: #333;
        }

    .add-comment-button {
        display: inline-block;
        padding: 10px 20px;
        border: 2px solid #00920B;
        background-color: #00920B;
        color: black;
        text-decoration: none;
        font-size: 16px;
        text-align: center;
        transition: background-color 0.3s, color 0.3s;
    }

        .add-comment-button:hover {
            background-color: gray;
            color: white;
            text-shadow: 0 0 5px white;
        }


    .edit-comment-button {
        background-color: orange; /* Màu vàng */
        color: white;
        border: none;
        cursor: pointer;
        padding: 5px 10px;
        transition: background-color 0.3s, color 0.3s;
    }

    .delete-comment-button {
        background-color: #FF0000; /* Màu đỏ */
        color: white;
        border: none;
        cursor: pointer;
        padding: 5px 10px;
        transition: background-color 0.3s, color 0.3s;
    }

        .comment-button:hover,
        .edit-comment-button:hover,
        .delete-comment-button:hover {
            background-color: gray; /* Màu xám khi hover vào */
            color: white;
        }

    .edit-comment-button,
    .delete-comment-button {
        width: 150px; /* Độ rộng */
        height: 40px; /* Chiều cao */
        font-size: 16px; /* Kích thước chữ */
        margin-right: 10px; /* Khoảng cách giữa các nút */
    }

    .custom-button,
    .like-button,
    .add-comment-button,
    .edit-comment-button,
    .delete-comment-button {
       border-radius: 5px;
    }

    .watch-video .video-divider {
        border: none;
        border-top: 2px solid #000; /* Màu đen và dày hơn để dễ nhìn */
        margin: 20px 0; /* Khoảng cách trên dưới */
    }

</style>

@* Active Liked *@
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var likeButton = document.getElementById('likeButton');
        var likeCountSpan = document.getElementById('likeCount');
        var likeIcon = document.getElementById('likeIcon');

        // Khởi tạo số like từ Local Storage hoặc mặc định là 0 nếu không có
        var likeCount = parseInt(localStorage.getItem('likeCount')) || 0;
        likeCountSpan.textContent = likeCount + " likes";

        // Biến kiểm tra xem người dùng đã like chưa
        var liked = localStorage.getItem('liked') === 'true';

        // Cập nhật trạng thái của nút like và icon
        if (liked) {
            likeButton.classList.add('liked');
            likeIcon.classList.add('liked');
        }

        likeButton.addEventListener('click', function () {
            if (!liked) {
                likeCount++;
                localStorage.setItem('likeCount', likeCount);
                likeCountSpan.textContent = likeCount + " likes";
                localStorage.setItem('liked', 'true');
                likeButton.classList.add('liked');
                likeIcon.classList.add('liked');
                liked = true;
            } else {
                likeCount--;
                localStorage.setItem('likeCount', likeCount);
                likeCountSpan.textContent = likeCount + " likes";
                localStorage.setItem('liked', 'false');
                likeButton.classList.remove('liked');
                likeIcon.classList.remove('liked');
                liked = false;
            }
        });
    });

    @* Active Comments *@
        document.addEventListener('DOMContentLoaded', function () {
            var addCommentForm = document.querySelector('.add-comment');
            var commentBoxContainer = document.getElementById('commentBoxContainer');
            var commentCountHeading = document.getElementById('commentCountHeading');
            var editMode = false; // Biến để kiểm tra xem có đang ở chế độ chỉnh sửa comment hay không
            var editedCommentIndex = null; // Index của comment đang được chỉnh sửa

            // Lấy danh sách comment từ Local Storage nếu có
            var comments = JSON.parse(localStorage.getItem('comments')) || [];

            // Hiển thị số lượng comment
            commentCountHeading.textContent = comments.length + " Comments";

            // Hiển thị các comment đã lưu trữ
            comments.forEach(function (comment, index) {
                var commentBox = createCommentBox(comment, index);
                commentBoxContainer.appendChild(commentBox);
            });

            addCommentForm.addEventListener('submit', function (event) {
                event.preventDefault(); // Ngăn chặn form gửi đi

                var commentText = document.getElementById('commentText').value;
                if (commentText.trim() === '') {
                    alert('Please enter your comment.'); // Hiển thị cảnh báo nếu comment rỗng
                    return;
                }

                if (editMode) {
                    // Nếu đang ở chế độ chỉnh sửa, cập nhật comment và lưu vào Local Storage
                    comments[editedCommentIndex].text = commentText;
                    localStorage.setItem('comments', JSON.stringify(comments));

                    // Hiển thị lại các comment sau khi chỉnh sửa
                    refreshComments();

                    // Reset lại các biến
                    editMode = false;
                    editedCommentIndex = null;
                } else {
                    // Lấy ngày, tháng, năm, giờ, phút, giây hiện tại
                    var currentDate = new Date();
                    var day = currentDate.getDate();
                    var month = currentDate.getMonth() + 1; // Tháng bắt đầu từ 0 nên cần cộng thêm 1
                    var year = currentDate.getFullYear();
                    var hours = currentDate.getHours();
                    var minutes = currentDate.getMinutes();
                    var seconds = currentDate.getSeconds();

                    // Định dạng lại chuỗi ngày tháng năm
                    var currentDateTimeString = day + "-" + month + "-" + year + " " + hours + ":" + minutes + ":" + seconds;

                    // Tạo comment mới
                    var newComment = {
                        text: commentText,
                        date: currentDateTimeString
                    };

                    // Thêm comment mới vào danh sách
                    comments.push(newComment);

                    // Lưu danh sách comment vào Local Storage
                    localStorage.setItem('comments', JSON.stringify(comments));

                    // Hiển thị comment mới
                    var commentBox = createCommentBox(newComment, comments.length - 1);
                    commentBoxContainer.appendChild(commentBox);

                    // Cập nhật số lượng comment và hiển thị nó
                    commentCountHeading.textContent = comments.length + " Comments";

                    // Xóa nội dung của ô textarea sau khi thêm comment thành công
                    document.getElementById('commentText').value = '';
                }
            });

            // Hàm tạo phần tử comment
            function createCommentBox(comment, index) {
                var commentBox = document.createElement('div');
                commentBox.classList.add('box');
                commentBox.innerHTML = `
                <div class="user">
                    <img src="~/images/pic-1.jpg" alt="">
                    <div>
                        <h3>@User.Identity.Name</h3>
                        <span>${comment.date}</span>
                    </div>
                </div>
                <div class="comment-box">${comment.text}</div>
                <form action="" class="flex-btn">
                    <input type="button" value="Edit Comment" name="edit_comment" class="edit-comment-button inline-option-btn" onclick="editComment(${index})">
                    <input type="button" value="Delete Comment" name="delete_comment" class="delete-comment-button inline-delete-btn" onclick="deleteComment(${index})">
                </form>
            `;
                return commentBox;
            }

            // Hàm để chỉnh sửa comment
            window.editComment = function (index) {
                var commentText = comments[index].text;
                document.getElementById('commentText').value = commentText;
                editMode = true;
                editedCommentIndex = index;
            }

            // Hàm để xóa comment
            window.deleteComment = function (index) {
                // Xóa comment khỏi danh sách
                comments.splice(index, 1);

                // Lưu danh sách comment vào Local Storage
                localStorage.setItem('comments', JSON.stringify(comments));

                // Hiển thị lại các comment sau khi xóa
                refreshComments();

                // Cập nhật số lượng comment và hiển thị nó
                commentCountHeading.textContent = comments.length + " Comments";
            }

            // Hàm để cập nhật lại các comment sau khi chỉnh sửa hoặc xóa
            function refreshComments() {
                // Xóa tất cả các comment hiện có
                commentBoxContainer.innerHTML = '';

                // Hiển thị lại tất cả các comment sau khi chỉnh sửa hoặc xóa
                comments.forEach(function (comment, index) {
                    var commentBox = createCommentBox(comment, index);
                    commentBoxContainer.appendChild(commentBox);
                });
            }
        });

</script>

